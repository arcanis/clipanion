import {homedir}          from 'os';
import path               from 'path';

import type {ShellDriver} from '../types';

/**
 * A driver for the bash shell. Also supports Git Bash.
 *
 * Shell Documentation: https://www.gnu.org/software/bash/manual/bash.html
 *
 * References:
 * - https://iridakos.com/programming/2018/03/01/bash-programmable-completion-tutorial
 */
const BashDriver: ShellDriver = {
  shellName: `bash`,

  // Unix-only shell - checking $SHELL
  isDefaultShell: () => !!process.env.SHELL?.includes(`bash`),

  // https://www.gnu.org/software/bash/manual/html_node/Bash-Startup-Files.html
  getShellConfigurationFile: () => path.join(homedir(), `.bashrc`),

  getCompletionBlock: ({getCompletionProviderCommand}) =>
    `. <(${getCompletionProviderCommand} ${BashDriver.shellName})`,

  // Completion system documentation: https://www.gnu.org/software/bash/manual/html_node/Programmable-Completion.html
  //
  // Variables used:
  // - $COMP_LINE is the current command line
  // - $COMP_POINT is the index of the current cursor position relative to the beginning of the current command
  // - $COMP_WORDS is an array variable consisting of the individual words in the current command line
  // - $COMP_CWORD is an index into $COMP_WORDS of the word containing the current cursor position
  // - $COMPREPLY is an array variable from which Bash reads the possible completions generated by a shell function invoked by the programmable completion facility
  getCompletionProvider: ({binaryName, requestCompletionCommand}) => `
    _${binaryName}_completions() {
      local OLDIFS="$IFS"
      local IFS=$'\n'
      COMPREPLY=(
        $(
          # select completions that match the original word
          compgen \\
            -W "$(${requestCompletionCommand} ${BashDriver.shellName} -- "$COMP_LINE" "$COMP_POINT" 2>/dev/null)" \\
            -- "\${COMP_WORDS[$COMP_CWORD]}"
        )
      )
      IFS="$OLDIFS"

      if [[ \${#COMPREPLY[*]} -eq 1 ]]; then
        COMPREPLY=( \${COMPREPLY[0]%% (*)} )
      fi
    }

    # https://www.gnu.org/software/bash/manual/html_node/Programmable-Completion-Builtins.html
    complete \\
      -F _${binaryName}_completions \\
      ${binaryName}
  `,

  getReply: completionResults =>
    completionResults
      // bash doesn't support completion descriptions natively, so we work around this by dynamically
      // stripping descriptions in the completion provider when there's a single completion available
      // https://stackoverflow.com/questions/7267185/bash-autocompletion-add-description-for-possible-completions
      .map(result =>
        typeof result.description === `string`
          ? `${result.completionText} (${result.description})`
          : result.completionText,
      )
      // "The wordlist is split using the characters in the IFS special variable as delimiters"
      .join(`\n`),
};

export {BashDriver};
